{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nexport function getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      throw __DEV__ ? new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.') : new InvariantError(43);\n    }\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n  if (typeof actualFragmentName === 'undefined') {\n    __DEV__ ? invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\") : invariant(fragments.length === 1, 44);\n    actualFragmentName = fragments[0].name.value;\n  }\n  var query = __assign(__assign({}, document), {\n    definitions: __spreadArray([{\n      kind: 'OperationDefinition',\n      operation: 'query',\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [{\n          kind: 'FragmentSpread',\n          name: {\n            kind: 'Name',\n            value: actualFragmentName\n          }\n        }]\n      }\n    }], document.definitions)\n  });\n  return query;\n}\nexport function createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n    case 'FragmentSpread':\n      {\n        var fragment = fragmentMap && fragmentMap[selection.name.value];\n        __DEV__ ? invariant(fragment, \"No fragment named \" + selection.name.value + \".\") : invariant(fragment, 45);\n        return fragment;\n      }\n    default:\n      return null;\n  }\n}","map":{"version":3,"names":["invariant","InvariantError","getFragmentQueryDocument","document","fragmentName","actualFragmentName","fragments","definitions","forEach","definition","kind","__DEV__","operation","name","value","push","length","query","__assign","__spreadArray","selectionSet","selections","createFragmentMap","symTable","fragment","getFragmentFromSelection","selection","fragmentMap"],"sources":["/Users/meltem/PycharmProjects/fullstack-js/node_modules/@apollo/src/utilities/graphql/fragments.ts"],"sourcesContent":["import {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionNode\n} from 'graphql';\nimport { invariant, InvariantError } from 'ts-invariant';\n\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string,\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach(definition => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === 'OperationDefinition') {\n      throw new InvariantError(\n        `Found a ${definition.operation} operation${\n          definition.name ? ` named '${definition.name.value}'` : ''\n        }. ` +\n          'No operations are allowed when using a fragment as a query. Only fragments are allowed.',\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === 'undefined') {\n    invariant(\n      fragments.length === 1,\n      `Found ${\n        fragments.length\n      } fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: 'OperationDefinition',\n        operation: 'query',\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [\n            {\n              kind: 'FragmentSpread',\n              name: {\n                kind: 'Name',\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = [],\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach(fragment => {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\n\nexport function getFragmentFromSelection(\n  selection: SelectionNode,\n  fragmentMap?: FragmentMap,\n): InlineFragmentNode | FragmentDefinitionNode | null {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n    case 'FragmentSpread': {\n      const fragment = fragmentMap && fragmentMap[selection.name.value];\n      invariant(fragment, `No fragment named ${selection.name.value}.`);\n      return fragment!;\n    }\n    default:\n      return null;\n  }\n}\n"],"mappings":";AAMA,SAASA,SAAS,EAAEC,cAAc,QAAQ,cAAc;AAwBxD,OAAM,SAAUC,wBAAwBA,CACtCC,QAAsB,EACtBC,YAAqB;EAErB,IAAIC,kBAAkB,GAAGD,YAAY;EAKrC,IAAME,SAAS,GAAkC,EAAE;EACnDH,QAAQ,CAACI,WAAW,CAACC,OAAO,CAAC,UAAAC,UAAU;IAGrC,IAAIA,UAAU,CAACC,IAAI,KAAK,qBAAqB,EAAE;MAC7C,MAAMC,OAAI,OAAAV,cACR,WAAW,GAAUQ,UAAU,CAAAG,SAAA,eAC7B,IAAUH,UAAQ,CAAAI,IAAA,aAAW,GAAUJ,UAAM,CAAKI,IAAA,CAAAC,KAAM,GAAE,MACxD,aACF,yFAAyF,CAC5F,GAAC,IAAAb,cAAA;;IAIJ,IAAIQ,UAAU,CAACC,IAAI,KAAK,oBAAoB,EAAE;MAC5CJ,SAAS,CAACS,IAAI,CAACN,UAAU,CAAC;;EAE9B,CAAC,CAAC;EAIF,IAAI,OAAOJ,kBAAkB,KAAK,WAAW,EAAE;IAC7CM,OAAA,GACEX,SAAS,CAACM,SAAM,CAAAU,MAChB,gBACE,GAAUV,SAAM,CAAAU,MAAA,sFAElB,IAAAhB,SAAA,CAAAM,SAAA,CAAAU,MAAA;IACFX,kBAAkB,GAAGC,SAAS,CAAC,CAAC,CAAC,CAACO,IAAI,CAACC,KAAK;;EAK9C,IAAMG,KAAK,GAAAC,QAAA,CAAAA,QAAA,KACNf,QAAQ;IACXI,WAAW,EAAAY,aAAA,EACT;MACET,IAAI,EAAE,qBAAqB;MAC3BE,SAAS,EAAE,OAAO;MAClBQ,YAAY,EAAE;QACZV,IAAI,EAAE,cAAc;QACpBW,UAAU,EAAE,CACV;UACEX,IAAI,EAAE,gBAAgB;UACtBG,IAAI,EAAE;YACJH,IAAI,EAAE,MAAM;YACZI,KAAK,EAAET;;SAEV;;KAGN,C,EACEF,QAAQ,CAACI,WAAW;EAAA,EAE1B;EAED,OAAOU,KAAK;AACd;AAWA,OAAM,SAAUK,iBAAiBA,CAC/BhB,SAAwC;EAAxC,IAAAA,SAAA;IAAAA,SAAA,KAAwC;EAAA;EAExC,IAAMiB,QAAQ,GAAgB,EAAE;EAChCjB,SAAS,CAACE,OAAO,CAAC,UAAAgB,QAAQ;IACxBD,QAAQ,CAACC,QAAQ,CAACX,IAAI,CAACC,KAAK,CAAC,GAAGU,QAAQ;EAC1C,CAAC,CAAC;EACF,OAAOD,QAAQ;AACjB;AAEA,OAAM,SAAUE,wBAAwBA,CACtCC,SAAwB,EACxBC,WAAyB;EAEzB,QAAQD,SAAS,CAAChB,IAAI;IACpB,KAAK,gBAAgB;MACnB,OAAOgB,SAAS;IAClB,KAAK,gBAAgB;MAAE;QACrB,IAAMF,QAAQ,GAAGG,WAAW,IAAIA,WAAW,CAACD,SAAS,CAACb,IAAI,CAACC,KAAK,CAAC;QACjEH,OAAA,GAAUX,SAAQ,CAAEwB,QAAA,sBAAqB,GAAUE,SAAK,CAAKb,IAAA,CAAAC,KAAK,UAAAd,SAAA,CAAAwB,QAAA;QAClE,OAAOA,QAAS;;IAElB;MACE,OAAO,IAAI;EAAC;AAElB"},"metadata":{},"sourceType":"module","externalDependencies":[]}