{"ast":null,"code":"import { visit } from 'graphql';\nimport { invariant } from 'ts-invariant';\nexport function shouldInclude(_a, variables) {\n  var directives = _a.directives;\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(function (_a) {\n    var directive = _a.directive,\n      ifArgument = _a.ifArgument;\n    var evaledValue = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[ifArgument.value.name.value];\n      __DEV__ ? invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\") : invariant(evaledValue !== void 0, 39);\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\nexport function getDirectiveNames(root) {\n  var names = [];\n  visit(root, {\n    Directive: function (node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\nexport function hasDirectives(names, root) {\n  return getDirectiveNames(root).some(function (name) {\n    return names.indexOf(name) > -1;\n  });\n}\nexport function hasClientExports(document) {\n  return document && hasDirectives(['client'], document) && hasDirectives(['export'], document);\n}\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === 'skip' || value === 'include';\n}\nexport function getInclusionDirectives(directives) {\n  var result = [];\n  if (directives && directives.length) {\n    directives.forEach(function (directive) {\n      if (!isInclusionDirective(directive)) return;\n      var directiveArguments = directive.arguments;\n      var directiveName = directive.name.value;\n      __DEV__ ? invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\") : invariant(directiveArguments && directiveArguments.length === 1, 40);\n      var ifArgument = directiveArguments[0];\n      __DEV__ ? invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\") : invariant(ifArgument.name && ifArgument.name.value === 'if', 41);\n      var ifValue = ifArgument.value;\n      __DEV__ ? invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\") : invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 42);\n      result.push({\n        directive: directive,\n        ifArgument: ifArgument\n      });\n    });\n  }\n  return result;\n}","map":{"version":3,"names":["visit","invariant","shouldInclude","_a","variables","directives","length","getInclusionDirectives","every","directive","ifArgument","evaledValue","value","kind","name","__DEV__","getDirectiveNames","root","names","Directive","node","push","hasDirectives","some","indexOf","hasClientExports","document","isInclusionDirective","result","forEach","directiveArguments","arguments","directiveName","ifValue"],"sources":["/Users/meltem/PycharmProjects/fullstack-js/node_modules/@apollo/src/utilities/graphql/directives.ts"],"sourcesContent":["// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n  visit,\n} from 'graphql';\n\nimport { invariant } from 'ts-invariant';\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>,\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(\n    directives\n  ).every(({ directive, ifArgument }) => {\n    let evaledValue: boolean = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[(ifArgument.value as VariableNode).name.value];\n      invariant(\n        evaledValue !== void 0,\n        `Invalid variable referenced in @${directive.name.value} directive.`,\n      );\n    } else {\n      evaledValue = (ifArgument.value as BooleanValueNode).value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport function hasDirectives(names: string[], root: ASTNode) {\n  return getDirectiveNames(root).some(\n    (name: string) => names.indexOf(name) > -1,\n  );\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return (\n    document &&\n    hasDirectives(['client'], document) &&\n    hasDirectives(['export'], document)\n  );\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>,\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach(directive => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @${directiveName} directive.`,\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === 'if',\n        `Invalid argument for the @${directiveName} directive.`,\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'),\n        `Argument for the @${directiveName} directive must be a variable or a boolean value.`,\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}