{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { DocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { OperationData } from \"./OperationData.js\";\nimport { mergeOptions } from \"../../core/index.js\";\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n  function MutationData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      result = _a.result,\n      setResult = _a.setResult;\n    var _this = _super.call(this, options, context) || this;\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n      _this.onMutationStart();\n      var mutationId = _this.generateNewMutationId();\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n        return response;\n      }).catch(function (error) {\n        var onError = _this.getOptions().onError;\n        _this.onMutationError(error, mutationId);\n        if (onError) {\n          onError(error);\n          return {\n            data: undefined,\n            errors: error\n          };\n        } else {\n          throw error;\n        }\n      });\n    };\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [this.runMutation, __assign(__assign({}, result), {\n      client: this.refreshClient().client\n    })];\n  };\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n  MutationData.prototype.cleanup = function () {};\n  MutationData.prototype.mutate = function (options) {\n    return this.refreshClient().client.mutate(mergeOptions(this.getOptions(), options));\n  };\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n      onCompleted = _a.onCompleted,\n      ignoreResults = _a.ignoreResults;\n    var data = response.data,\n      errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n    var callOncomplete = function () {\n      return onCompleted ? onCompleted(data) : null;\n    };\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n    callOncomplete();\n  };\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n      return result;\n    }\n  };\n  return MutationData;\n}(OperationData);\nexport { MutationData };","map":{"version":3,"names":["equal","DocumentType","ApolloError","OperationData","mergeOptions","MutationData","_super","__extends","_a","options","context","result","setResult","_this","call","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","then","response","onMutationCompleted","catch","error","onError","getOptions","onMutationError","data","undefined","errors","verifyDocumentType","mutation","Mutation","mostRecentMutationId","prototype","execute","isMounted","client","refreshClient","afterExecute","unmount","bind","cleanup","loading","ignoreResults","updateResult","called","onCompleted","length","graphQLErrors","callOncomplete","isMostRecentMutation","previousResult"],"sources":["/Users/meltem/PycharmProjects/fullstack-js/node_modules/@apollo/src/react/data/MutationData.ts"],"sourcesContent":["import { equal } from '@wry/equality';\n\nimport { DocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport {\n  MutationDataOptions,\n  MutationTuple,\n  MutationFunctionOptions,\n  MutationResult,\n} from '../types/types';\nimport { OperationData } from './OperationData';\nimport { MutationOptions, mergeOptions, ApolloCache, OperationVariables, DefaultContext } from '../../core';\nimport { FetchResult } from '../../link/core';\n\ntype MutationResultWithoutClient<TData = any> = Omit<MutationResult<TData>, 'client'>;\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n> extends OperationData<MutationDataOptions<TData, TVariables, TContext, TCache>> {\n  private mostRecentMutationId: number;\n  private result: MutationResultWithoutClient<TData>;\n  private previousResult?: MutationResultWithoutClient<TData>;\n  private setResult: (result: MutationResultWithoutClient<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationDataOptions<TData, TVariables, TContext, TCache>;\n    context: any;\n    result: MutationResultWithoutClient<TData>;\n    setResult: (result: MutationResultWithoutClient<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResultWithoutClient<TData>): MutationTuple<TData, TVariables, TContext, TCache> {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [\n      this.runMutation,\n      { ...result, client: this.refreshClient().client }\n    ] as MutationTuple<TData, TVariables, TContext, TCache>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {} as MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: FetchResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        const { onError } = this.getOptions();\n        this.onMutationError(error, mutationId);\n        if (onError) {\n          onError(error);\n          return {\n            data: undefined,\n            errors: error,\n          };\n        } else {\n          throw error;\n        }\n      });\n  };\n\n  private mutate(\n    options: MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) {\n    return this.refreshClient().client.mutate(\n      mergeOptions(\n        this.getOptions(),\n        options as MutationOptions<TData, TVariables, TContext>,\n      ),\n    );\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: FetchResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResultWithoutClient<TData>): MutationResultWithoutClient<TData> | undefined {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !equal(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n      return result;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}