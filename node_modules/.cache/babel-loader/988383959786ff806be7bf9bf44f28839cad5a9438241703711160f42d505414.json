{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { OperationData } from \"./OperationData.js\";\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n  function SubscriptionData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      setResult = _a.setResult;\n    var _this = _super.call(this, options, context) || this;\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n    _this.initialize(options);\n    return _this;\n  }\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n    var currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy,\n      context: options.context\n    });\n  };\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n  SubscriptionData.prototype.completeSubscription = function () {\n    var _this = this;\n    Promise.resolve().then(function () {\n      var onSubscriptionComplete = _this.getOptions().onSubscriptionComplete;\n      if (onSubscriptionComplete) onSubscriptionComplete();\n      _this.endSubscription();\n    });\n  };\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n  return SubscriptionData;\n}(OperationData);\nexport { SubscriptionData };","map":{"version":3,"names":["equal","OperationData","SubscriptionData","_super","__extends","_a","options","context","setResult","_this","call","currentObservable","initialize","prototype","execute","result","getOptions","skip","cleanup","loading","error","undefined","data","variables","currentResult","refreshClient","isNew","getLoadingResult","shouldResubscribe","previousOptions","Object","keys","length","subscription","startSubscription","__assign","afterExecute","isMounted","endSubscription","query","client","subscribe","fetchPolicy","next","updateCurrentData","bind","updateError","complete","completeSubscription","updateResult","onSubscriptionData","subscriptionData","Promise","resolve","then","onSubscriptionComplete","unsubscribe"],"sources":["/Users/meltem/PycharmProjects/fullstack-js/node_modules/@apollo/src/react/data/SubscriptionData.ts"],"sourcesContent":["import { equal } from '@wry/equality';\n\nimport { OperationData } from './OperationData';\nimport {\n  SubscriptionCurrentObservable,\n  SubscriptionDataOptions,\n  SubscriptionResult\n} from '../types/types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionDataOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionDataOptions<TData, TVariables>;\n    context: any;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !equal(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionDataOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy,\n      context: options.context,\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    } as SubscriptionResult<TData>;\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    // We have to defer this endSubscription call, because otherwise multiple\n    // subscriptions for the same component will cause infinite rendering.\n    // See https://github.com/apollographql/apollo-client/pull/7917\n    Promise.resolve().then(() => {\n      const { onSubscriptionComplete } = this.getOptions();\n      if (onSubscriptionComplete) onSubscriptionComplete();\n      this.endSubscription();\n    });\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,eAAe;AAErC,SAASC,aAAa,QAAQ,oBAAkB;AAOhD,IAAAC,gBAAA,aAAAC,MAAA;EAGUC,SAAA,CAAAF,gBAAA,EAAAC,MAAA;EAIR,SAAAD,iBAAYG,EAQX;QAPCC,OAAO,GAAAD,EAAA,CAAAC,OAAA;MACPC,OAAO,GAAAF,EAAA,CAAAE,OAAA;MACPC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IAHX,IAAAC,KAAA,GASEN,MAAA,CAAAO,IAAA,OAAMJ,OAAO,EAAEC,OAAO,CAAC;IAXjBE,KAAA,CAAAE,iBAAiB,GAAkC,EAAE;IAY3DF,KAAI,CAACD,SAAS,GAAGA,SAAS;IAC1BC,KAAI,CAACG,UAAU,CAACN,OAAO,CAAC;;EAC1B;EAEOJ,gBAAA,CAAAW,SAAA,CAAAC,OAAO,GAAd,UAAeC,MAAiC;IAC9C,IAAI,IAAI,CAACC,UAAU,EAAE,CAACC,IAAI,KAAK,IAAI,EAAE;MACnC,IAAI,CAACC,OAAO,EAAE;MACd,OAAO;QACLC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEC,SAAS;QAChBC,IAAI,EAAED,SAAS;QACfE,SAAS,EAAE,IAAI,CAACP,UAAU,EAAE,CAACO;OAC9B;;IAGH,IAAIC,aAAa,GAAGT,MAAM;IAC1B,IAAI,IAAI,CAACU,aAAa,EAAE,CAACC,KAAK,EAAE;MAC9BF,aAAa,GAAG,IAAI,CAACG,gBAAgB,EAAE;;IAGnC,IAAAC,iBAAiB,GAAK,IAAI,CAACZ,UAAU,EAAE,CAAAY,iBAAtB;IACvB,IAAI,OAAOA,iBAAiB,KAAK,UAAU,EAAE;MAC3CA,iBAAiB,GAAG,CAAC,CAACA,iBAAiB,CAAC,IAAI,CAACZ,UAAU,EAAE,CAAC;;IAG5D,IACEY,iBAAiB,KAAK,KAAK,IAC3B,IAAI,CAACC,eAAe,IACpBC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACF,eAAe,CAAC,CAACG,MAAM,GAAG,CAAC,KAC3C,IAAI,CAACH,eAAe,CAACI,YAAY,KAAK,IAAI,CAACjB,UAAU,EAAE,CAACiB,YAAY,IACnE,CAACjC,KAAK,CAAC,IAAI,CAAC6B,eAAe,CAACN,SAAS,EAAE,IAAI,CAACP,UAAU,EAAE,CAACO,SAAS,CAAC,IACnE,IAAI,CAACM,eAAe,CAACZ,IAAI,KAAK,IAAI,CAACD,UAAU,EAAE,CAACC,IAAI,CAAC,EACvD;MACA,IAAI,CAACC,OAAO,EAAE;MACdM,aAAa,GAAG,IAAI,CAACG,gBAAgB,EAAE;;IAGzC,IAAI,CAACf,UAAU,CAAC,IAAI,CAACI,UAAU,EAAE,CAAC;IAClC,IAAI,CAACkB,iBAAiB,EAAE;IAExB,IAAI,CAACL,eAAe,GAAG,IAAI,CAACb,UAAU,EAAE;IACxC,OAAAmB,QAAA,CAAAA,QAAA,KAAYX,aAAa;MAAED,SAAS,EAAE,IAAI,CAACP,UAAU,EAAE,CAACO;IAAS;EACnE,CAAC;EAEMrB,gBAAA,CAAAW,SAAA,CAAAuB,YAAY,GAAnB;IACE,IAAI,CAACC,SAAS,GAAG,IAAI;EACvB,CAAC;EAEMnC,gBAAA,CAAAW,SAAA,CAAAK,OAAO,GAAd;IACE,IAAI,CAACoB,eAAe,EAAE;IACtB,OAAO,IAAI,CAAC3B,iBAAiB,CAAC4B,KAAK;EACrC,CAAC;EAEOrC,gBAAA,CAAAW,SAAA,CAAAD,UAAU,GAAlB,UAAmBN,OAAmD;IACpE,IAAI,IAAI,CAACK,iBAAiB,CAAC4B,KAAK,IAAI,IAAI,CAACvB,UAAU,EAAE,CAACC,IAAI,KAAK,IAAI,EAAE;IACrE,IAAI,CAACN,iBAAiB,CAAC4B,KAAK,GAAG,IAAI,CAACd,aAAa,EAAE,CAACe,MAAM,CAACC,SAAS,CAAC;MACnEF,KAAK,EAAEjC,OAAO,CAAC2B,YAAY;MAC3BV,SAAS,EAAEjB,OAAO,CAACiB,SAAS;MAC5BmB,WAAW,EAAEpC,OAAO,CAACoC,WAAW;MAChCnC,OAAO,EAAED,OAAO,CAACC;KAClB,CAAC;EACJ,CAAC;EAEOL,gBAAA,CAAAW,SAAA,CAAAqB,iBAAiB,GAAzB;IACE,IAAI,IAAI,CAACvB,iBAAiB,CAACsB,YAAY,EAAE;IACzC,IAAI,CAACtB,iBAAiB,CAACsB,YAAY,GAAG,IAAI,CAACtB,iBAAiB,CAAC4B,KAAM,CAACE,SAAS,CAC3E;MACEE,IAAI,EAAE,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC;MACvCzB,KAAK,EAAE,IAAI,CAAC0B,WAAW,CAACD,IAAI,CAAC,IAAI,CAAC;MAClCE,QAAQ,EAAE,IAAI,CAACC,oBAAoB,CAACH,IAAI,CAAC,IAAI;KAC9C,CACF;EACH,CAAC;EAEO3C,gBAAA,CAAAW,SAAA,CAAAc,gBAAgB,GAAxB;IACE,OAAO;MACLR,OAAO,EAAE,IAAI;MACbC,KAAK,EAAEC,SAAS;MAChBC,IAAI,EAAED;KACsB;EAChC,CAAC;EAEOnB,gBAAA,CAAAW,SAAA,CAAAoC,YAAY,GAApB,UAAqBlC,MAA0B;IAC7C,IAAI,IAAI,CAACsB,SAAS,EAAE;MAClB,IAAI,CAAC7B,SAAS,CAACO,MAAM,CAAC;;EAE1B,CAAC;EAEOb,gBAAA,CAAAW,SAAA,CAAA+B,iBAAiB,GAAzB,UAA0B7B,MAAiC;IACjD,IAAAmC,kBAAkB,GAAK,IAAI,CAAClC,UAAU,EAAE,CAAAkC,kBAAtB;IAE1B,IAAI,CAACD,YAAY,CAAC;MAChB3B,IAAI,EAAEP,MAAM,CAACO,IAAI;MACjBH,OAAO,EAAE,KAAK;MACdC,KAAK,EAAEC;KACR,CAAC;IAEF,IAAI6B,kBAAkB,EAAE;MACtBA,kBAAkB,CAAC;QACjBV,MAAM,EAAE,IAAI,CAACf,aAAa,EAAE,CAACe,MAAM;QACnCW,gBAAgB,EAAEpC;OACnB,CAAC;;EAEN,CAAC;EAEOb,gBAAA,CAAAW,SAAA,CAAAiC,WAAW,GAAnB,UAAoB1B,KAAU;IAC5B,IAAI,CAAC6B,YAAY,CAAC;MAChB7B,KAAK,EAAAA,KAAA;MACLD,OAAO,EAAE;KACV,CAAC;EACJ,CAAC;EAEOjB,gBAAA,CAAAW,SAAA,CAAAmC,oBAAoB,GAA5B;IAAA,IAAAvC,KAAA;IAIE2C,OAAO,CAACC,OAAO,EAAE,CAACC,IAAI,CAAC;MACb,IAAAC,sBAAsB,GAAK9C,KAAI,CAACO,UAAU,EAAE,CAAAuC,sBAAtB;MAC9B,IAAIA,sBAAsB,EAAEA,sBAAsB,EAAE;MACpD9C,KAAI,CAAC6B,eAAe,EAAE;IACxB,CAAC,CAAC;EACJ,CAAC;EAEOpC,gBAAA,CAAAW,SAAA,CAAAyB,eAAe,GAAvB;IACE,IAAI,IAAI,CAAC3B,iBAAiB,CAACsB,YAAY,EAAE;MACvC,IAAI,CAACtB,iBAAiB,CAACsB,YAAY,CAACuB,WAAW,EAAE;MACjD,OAAO,IAAI,CAAC7C,iBAAiB,CAACsB,YAAY;;EAE9C,CAAC;EACH,OAAA/B,gBAAC;AAAD,CAAC,CA/ISD,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}