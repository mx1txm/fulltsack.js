{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType } from \"../parser/index.js\";\nimport { OperationData } from \"./OperationData.js\";\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n  function QueryData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      onNewData = _a.onNewData;\n    var _this = _super.call(this, options, context) || this;\n    _this.runLazy = false;\n    _this.previous = Object.create(null);\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n      _this.onNewData();\n    };\n    _this.obsRefetch = function (variables) {\n      var _a;\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.refetch(variables);\n    };\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      var _a;\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.fetchMore(fetchMoreOptions);\n    };\n    _this.obsUpdateQuery = function (mapFn) {\n      var _a;\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.updateQuery(mapFn);\n    };\n    _this.obsStartPolling = function (pollInterval) {\n      var _a;\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.startPolling(pollInterval);\n    };\n    _this.obsStopPolling = function () {\n      var _a;\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.stopPolling();\n    };\n    _this.obsSubscribeToMore = function (options) {\n      var _a;\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.subscribeToMore(options);\n    };\n    _this.onNewData = onNewData;\n    return _this;\n  }\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n    var _a = this.getOptions(),\n      skip = _a.skip,\n      query = _a.query;\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n    this.updateObservableQuery();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n  QueryData.prototype.fetchData = function () {\n    var _this = this;\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(function (resolve) {\n      return _this.startQuerySubscription(resolve);\n    });\n  };\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.lazy,\n      lazy = _c === void 0 ? false : _c;\n    this.isMounted = true;\n    var options = this.getOptions();\n    if (this.currentObservable && !this.ssrInitiated() && !this.client.disableNetworkFetches) {\n      this.startQuerySubscription();\n    }\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  };\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  };\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n    if (this.runLazy) {\n      delete options.skip;\n    }\n    return options;\n  };\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var _a = this.getOptions(),\n      ssr = _a.ssr,\n      skip = _a.skip;\n    var ssrDisabled = ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n    if (this.ssrInitiated()) {\n      var result = this.getExecuteResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises.addQueryPromise(this, function () {\n          return null;\n        });\n      }\n      return result;\n    }\n  };\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context\n    });\n  };\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n    if (!this.currentObservable) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previous.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: void 0\n      });\n      this.currentObservable = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n      if (this.ssrInitiated()) {\n        this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);\n      }\n    }\n  };\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: void 0\n    });\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n    if (!equal(newObservableQueryOptions, this.previous.observableQueryOptions)) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n  QueryData.prototype.startQuerySubscription = function (onNewData) {\n    var _this = this;\n    if (onNewData === void 0) {\n      onNewData = this.onNewData;\n    }\n    if (this.currentSubscription || this.getOptions().skip) return;\n    this.currentSubscription = this.currentObservable.subscribe({\n      next: function (_a) {\n        var loading = _a.loading,\n          networkStatus = _a.networkStatus,\n          data = _a.data;\n        var previousResult = _this.previous.result;\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n        onNewData();\n      },\n      error: function (error) {\n        _this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n        var previousResult = _this.previous.result;\n        if (previousResult && previousResult.loading || !equal(error, _this.previous.error)) {\n          _this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  };\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var currentObservable = this.currentObservable;\n    if (currentObservable) {\n      var last = currentObservable[\"last\"];\n      try {\n        currentObservable.resetLastResults();\n        this.startQuerySubscription();\n      } finally {\n        currentObservable[\"last\"] = last;\n      }\n    }\n  };\n  QueryData.prototype.getExecuteResult = function () {\n    var result = this.observableQueryFields();\n    var options = this.getOptions();\n    if (options.skip) {\n      result = __assign(__assign({}, result), {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true\n      });\n    } else if (this.currentObservable) {\n      var currentResult = this.currentObservable.getCurrentResult();\n      var data = currentResult.data,\n        loading = currentResult.loading,\n        partial = currentResult.partial,\n        networkStatus = currentResult.networkStatus,\n        errors = currentResult.errors;\n      var error = currentResult.error;\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n      result = __assign(__assign({}, result), {\n        data: data,\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n      if (loading) {} else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.options.fetchPolicy;\n        var partialRefetch = options.partialRefetch;\n        if (partialRefetch && partial && (!data || Object.keys(data).length === 0) && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n    result.client = this.client;\n    this.setOptions(options, true);\n    var previousResult = this.previous.result;\n    this.previous.loading = previousResult && previousResult.loading || false;\n    result.previousData = previousResult && (previousResult.data || previousResult.previousData);\n    this.previous.result = result;\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n    return result;\n  };\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    if (!this.currentObservable || !this.previous.result) return;\n    var _a = this.previous.result,\n      data = _a.data,\n      loading = _a.loading,\n      error = _a.error;\n    if (!loading) {\n      var _b = this.getOptions(),\n        query = _b.query,\n        variables = _b.variables,\n        onCompleted = _b.onCompleted,\n        onError = _b.onError,\n        skip = _b.skip;\n      if (this.previousOptions && !this.previous.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n      if (onCompleted && !error && !skip) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  };\n  QueryData.prototype.removeObservable = function (andDelete) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  };\n  QueryData.prototype.observableQueryFields = function () {\n    var _a;\n    return {\n      variables: (_a = this.currentObservable) === null || _a === void 0 ? void 0 : _a.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n  return QueryData;\n}(OperationData);\nexport { QueryData };","map":{"version":3,"names":["equal","ApolloError","NetworkStatus","DocumentType","OperationData","QueryData","_super","__extends","_a","options","context","onNewData","_this","call","runLazy","previous","Object","create","runLazyQuery","cleanup","lazyOptions","obsRefetch","variables","currentObservable","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","prototype","execute","refreshClient","getOptions","skip","query","removeQuerySubscription","removeObservable","updateObservableQuery","getExecuteSsrResult","getExecuteResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","Promise","resolve","startQuerySubscription","afterExecute","_b","_c","lazy","isMounted","ssrInitiated","client","disableNetworkFetches","handleErrorOrCompleted","previousOptions","unmount","bind","result","__assign","renderPromises","ssrDisabled","fetchDisabled","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","verifyDocumentType","Query","displayName","fetchPolicy","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","setOptions","catch","currentSubscription","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","last","resetLastResults","currentResult","getCurrentResult","partial","errors","length","graphQLErrors","assign","getLastResult","partialRefetch","keys","previousData","resetQueryStoreErrors","onCompleted","onError","unsubscribe","andDelete"],"sources":["/Users/meltem/PycharmProjects/fullstack-js/node_modules/@apollo/src/react/data/QueryData.ts"],"sourcesContent":["import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode,\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\ntype ObservableQueryOptions<TData, TVars> =\n  ReturnType<QueryData<TData, TVars>[\"prepareObservableQueryOptions\"]>;\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  public currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: ObservableQueryOptions<TData, TVariables>;\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n    const options = this.getOptions();\n    if (\n      this.currentObservable &&\n      !this.ssrInitiated() &&\n      !this.client.disableNetworkFetches\n    ) {\n      this.startQuerySubscription();\n    }\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      const result = this.getExecuteResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises!.addQueryPromise(this, () => null);\n      }\n      return result;\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: void 0,\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: void 0,\n    };\n\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n\n    if (\n      !equal(newObservableQueryOptions, this.previous.observableQueryOptions)\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const last = currentObservable[\"last\"];\n      try {\n        currentObservable.resetLastResults();\n        this.startQuerySubscription();\n      } finally {\n        currentObservable[\"last\"] = last;\n      }\n    }\n  }\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = (\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable?.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable?.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable?.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}