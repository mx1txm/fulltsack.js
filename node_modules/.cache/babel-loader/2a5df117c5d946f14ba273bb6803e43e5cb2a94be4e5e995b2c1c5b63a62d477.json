{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useContext, useState, useRef, useEffect } from 'react';\nimport { MutationData } from \"../data/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nexport function useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n  var _a = useState({\n      called: false,\n      loading: false\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}","map":{"version":3,"names":["useContext","useState","useRef","useEffect","MutationData","getApolloContext","useMutation","mutation","options","context","_a","called","loading","result","setResult","updatedOptions","__assign","mutationDataRef","getMutationDataRef","current","mutationData","setOptions","afterExecute","execute"],"sources":["/Users/meltem/PycharmProjects/fullstack-js/node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { MutationHookOptions, MutationTuple } from '../types/types';\nimport { MutationData } from '../data';\nimport { ApolloCache, DefaultContext, OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables, TContext>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables, TContext>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAK/D,SAASC,YAAY,QAAQ,kBAAU;AAEvC,SAASC,gBAAgB,QAAQ,qBAAa;AAE9C,OAAM,SAAUC,WAAWA,CAMzBC,QAA6D,EAC7DC,OAA0D;EAE1D,IAAMC,OAAO,GAAGT,UAAU,CAACK,gBAAgB,EAAE,CAAC;EACxC,IAAAK,EAAA,GAAsBT,QAAQ,CAAC;MAAEU,MAAM,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAK,CAAE,CAAC;IAAhEC,MAAM,GAAAH,EAAA;IAAEI,SAAS,GAAAJ,EAAA,GAA+C;EACvE,IAAMK,cAAc,GAAGP,OAAO,GAAEQ,QAAA,CAAAA,QAAA,KAAMR,OAAO;IAAED,QAAQ,EAAAA;EAAA,KAAK;IAAEA,QAAQ,EAAAA;EAAA,CAAE;EAExE,IAAMU,eAAe,GAAGf,MAAM,EAA6C;EAC3E,SAASgB,kBAAkBA,CAAA;IACzB,IAAI,CAACD,eAAe,CAACE,OAAO,EAAE;MAC5BF,eAAe,CAACE,OAAO,GAAG,IAAIf,YAAY,CAA8B;QACtEI,OAAO,EAAEO,cAAc;QACvBN,OAAO,EAAAA,OAAA;QACPI,MAAM,EAAAA,MAAA;QACNC,SAAS,EAAAA;OACV,CAAC;;IAEJ,OAAOG,eAAe,CAACE,OAAO;EAChC;EAEA,IAAMC,YAAY,GAAGF,kBAAkB,EAAE;EACzCE,YAAY,CAACC,UAAU,CAACN,cAAc,CAAC;EACvCK,YAAY,CAACX,OAAO,GAAGA,OAAO;EAE9BN,SAAS,CAAC;IAAM,OAAAiB,YAAY,CAACE,YAAY,EAAE;EAA3B,CAA2B,CAAC;EAE5C,OAAOF,YAAY,CAACG,OAAO,CAACV,MAAM,CAAC;AACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}