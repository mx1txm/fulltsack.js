{"ast":null,"code":"import { isReference, isField, DeepMerger, resultKeyNameFromField, shouldInclude, isNonNullObject } from \"../../utilities/index.js\";\nexport var hasOwn = Object.prototype.hasOwnProperty;\nexport function getTypenameFromStoreObject(store, objectOrReference) {\n  return isReference(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\nexport var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nexport function fieldNameFromStoreName(storeFieldName) {\n  var match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\nexport function selectionSetMatchesResult(selectionSet, result, variables) {\n  if (isNonNullObject(result)) {\n    return Array.isArray(result) ? result.every(function (item) {\n      return selectionSetMatchesResult(selectionSet, item, variables);\n    }) : selectionSet.selections.every(function (field) {\n      if (isField(field) && shouldInclude(field, variables)) {\n        var key = resultKeyNameFromField(field);\n        return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));\n      }\n      return true;\n    });\n  }\n  return false;\n}\nexport function storeValueIsStoreObject(value) {\n  return isNonNullObject(value) && !isReference(value) && !Array.isArray(value);\n}\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger();\n}","map":{"version":3,"names":["isReference","isField","DeepMerger","resultKeyNameFromField","shouldInclude","isNonNullObject","hasOwn","Object","prototype","hasOwnProperty","getTypenameFromStoreObject","store","objectOrReference","get","__ref","__typename","TypeOrFieldNameRegExp","fieldNameFromStoreName","storeFieldName","match","selectionSetMatchesResult","selectionSet","result","variables","Array","isArray","every","item","selections","field","key","call","storeValueIsStoreObject","value","makeProcessedFieldsMerger"],"sources":["/Users/meltem/PycharmProjects/fullstack-js/node_modules/@apollo/src/cache/inmemory/helpers.ts"],"sourcesContent":["import { SelectionSetNode } from 'graphql';\n\nimport { NormalizedCache } from './types';\nimport {\n  Reference,\n  isReference,\n  StoreValue,\n  StoreObject,\n  isField,\n  DeepMerger,\n  resultKeyNameFromField,\n  shouldInclude,\n  isNonNullObject,\n} from '../../utilities';\n\nexport const {\n  hasOwnProperty: hasOwn,\n} = Object.prototype;\n\nexport function getTypenameFromStoreObject(\n  store: NormalizedCache,\n  objectOrReference: StoreObject | Reference,\n): string | undefined {\n  return isReference(objectOrReference)\n    ? store.get(objectOrReference.__ref, \"__typename\") as string\n    : objectOrReference && objectOrReference.__typename;\n}\n\nexport const TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\n\nexport function fieldNameFromStoreName(storeFieldName: string): string {\n  const match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\n\nexport function selectionSetMatchesResult(\n  selectionSet: SelectionSetNode,\n  result: Record<string, any>,\n  variables?: Record<string, any>,\n): boolean {\n  if (isNonNullObject(result)) {\n    return Array.isArray(result)\n      ? result.every(item => selectionSetMatchesResult(selectionSet, item, variables))\n      : selectionSet.selections.every(field => {\n        if (isField(field) && shouldInclude(field, variables)) {\n          const key = resultKeyNameFromField(field);\n          return hasOwn.call(result, key) &&\n            (!field.selectionSet ||\n             selectionSetMatchesResult(field.selectionSet, result[key], variables));\n        }\n        // If the selection has been skipped with @skip(true) or\n        // @include(false), it should not count against the matching. If\n        // the selection is not a field, it must be a fragment (inline or\n        // named). We will determine if selectionSetMatchesResult for that\n        // fragment when we get to it, so for now we return true.\n        return true;\n      });\n  }\n  return false;\n}\n\nexport function storeValueIsStoreObject(\n  value: StoreValue,\n): value is StoreObject {\n  return isNonNullObject(value) &&\n    !isReference(value) &&\n    !Array.isArray(value);\n}\n\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger;\n}\n"],"mappings":"AAGA,SAEEA,WAAW,EAGXC,OAAO,EACPC,UAAU,EACVC,sBAAsB,EACtBC,aAAa,EACbC,eAAe,QACV,0BAAkB;AAEzB,OACE,IAAgBC,MAAM,GACpBC,MAAM,CAACC,SAAS,CAAAC,cADI;AAGxB,OAAM,SAAUC,0BAA0BA,CACxCC,KAAsB,EACtBC,iBAA0C;EAE1C,OAAOZ,WAAW,CAACY,iBAAiB,CAAC,GACjCD,KAAK,CAACE,GAAG,CAACD,iBAAiB,CAACE,KAAK,EAAE,YAAY,CAAW,GAC1DF,iBAAiB,IAAIA,iBAAiB,CAACG,UAAU;AACvD;AAEA,OAAO,IAAMC,qBAAqB,GAAG,oBAAoB;AAEzD,OAAM,SAAUC,sBAAsBA,CAACC,cAAsB;EAC3D,IAAMC,KAAK,GAAGD,cAAc,CAACC,KAAK,CAACH,qBAAqB,CAAC;EACzD,OAAOG,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAGD,cAAc;AAC1C;AAEA,OAAM,SAAUE,yBAAyBA,CACvCC,YAA8B,EAC9BC,MAA2B,EAC3BC,SAA+B;EAE/B,IAAIlB,eAAe,CAACiB,MAAM,CAAC,EAAE;IAC3B,OAAOE,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,GACxBA,MAAM,CAACI,KAAK,CAAC,UAAAC,IAAI;MAAI,OAAAP,yBAAyB,CAACC,YAAY,EAAEM,IAAI,EAAEJ,SAAS,CAAC;IAAxD,CAAwD,CAAC,GAC9EF,YAAY,CAACO,UAAU,CAACF,KAAK,CAAC,UAAAG,KAAK;MACnC,IAAI5B,OAAO,CAAC4B,KAAK,CAAC,IAAIzB,aAAa,CAACyB,KAAK,EAAEN,SAAS,CAAC,EAAE;QACrD,IAAMO,GAAG,GAAG3B,sBAAsB,CAAC0B,KAAK,CAAC;QACzC,OAAOvB,MAAM,CAACyB,IAAI,CAACT,MAAM,EAAEQ,GAAG,CAAC,KAC5B,CAACD,KAAK,CAACR,YAAY,IACnBD,yBAAyB,CAACS,KAAK,CAACR,YAAY,EAAEC,MAAM,CAACQ,GAAG,CAAC,EAAEP,SAAS,CAAC,CAAC;;MAO3E,OAAO,IAAI;IACb,CAAC,CAAC;;EAEN,OAAO,KAAK;AACd;AAEA,OAAM,SAAUS,uBAAuBA,CACrCC,KAAiB;EAEjB,OAAO5B,eAAe,CAAC4B,KAAK,CAAC,IAC3B,CAACjC,WAAW,CAACiC,KAAK,CAAC,IACnB,CAACT,KAAK,CAACC,OAAO,CAACQ,KAAK,CAAC;AACzB;AAEA,OAAM,SAAUC,yBAAyBA,CAAA;EACvC,OAAO,IAAIhC,UAAU;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}